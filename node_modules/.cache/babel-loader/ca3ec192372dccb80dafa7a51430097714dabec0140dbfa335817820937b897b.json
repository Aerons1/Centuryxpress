{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\centuryexpress\\\\client\\\\src\\\\pages\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GoogleLogin } from '@react-oauth/google';\nimport { jwtDecode } from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport API from '../api';\nimport { saveToken } from '../auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    try {\n      const {\n        data\n      } = await API.post('/auth/login', {\n        email,\n        password\n      });\n      saveToken(data.token);\n      const decoded = jwtDecode(data.token);\n      if (decoded.isAdmin) {\n        toast.success('Admin login successful!');\n        navigate('/admin');\n      } else {\n        toast.success('Login successful!');\n        navigate('/dashboard'); // Redirect normal users to dashboard\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      toast.error(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Invalid credentials');\n    }\n  };\n  const handleGoogleSuccess = async credentialResponse => {\n    try {\n      const {\n        data\n      } = await API.post('/auth/google', {\n        token: credentialResponse.credential\n      });\n      saveToken(data.token);\n      const decoded = jwtDecode(data.token);\n      if (decoded.isAdmin) {\n        toast.success('Admin Google login successful!');\n        navigate('/admin');\n      } else {\n        toast.success('Google login successful!');\n        navigate('/dashboard'); // Redirect normal users to dashboard\n      }\n    } catch (err) {\n      toast.error('Google Sign-In failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    style: {\n      maxWidth: '500px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mb-3\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Email\",\n      className: \"form-control mb-2\",\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      className: \"form-control mb-2\",\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary w-100 mb-3\",\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleGoogleSuccess,\n      onError: () => toast.error('Google Login Failed')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"OqFWRqNCJ3BNGyYdED5qKBGtbCw=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","GoogleLogin","jwtDecode","toast","API","saveToken","jsxDEV","_jsxDEV","Login","_s","email","setEmail","password","setPassword","navigate","handleLogin","data","post","token","decoded","isAdmin","success","err","_err$response","_err$response$data","error","response","msg","handleGoogleSuccess","credentialResponse","credential","className","style","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","onSuccess","onError","_c","$RefreshReg$"],"sources":["C:/Users/PC/centuryexpress/client/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport API from '../api';\r\nimport { saveToken } from '../auth';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const { data } = await API.post('/auth/login', { email, password });\r\n      saveToken(data.token);\r\n\r\n      const decoded = jwtDecode(data.token);\r\n\r\n      if (decoded.isAdmin) {\r\n        toast.success('Admin login successful!');\r\n        navigate('/admin');\r\n      } else {\r\n        toast.success('Login successful!');\r\n        navigate('/dashboard'); // Redirect normal users to dashboard\r\n      }\r\n    } catch (err) {\r\n      toast.error(err.response?.data?.msg || 'Invalid credentials');\r\n    }\r\n  };\r\n\r\n  const handleGoogleSuccess = async (credentialResponse) => {\r\n    try {\r\n      const { data } = await API.post('/auth/google', {\r\n        token: credentialResponse.credential\r\n      });\r\n      saveToken(data.token);\r\n\r\n      const decoded = jwtDecode(data.token);\r\n\r\n      if (decoded.isAdmin) {\r\n        toast.success('Admin Google login successful!');\r\n        navigate('/admin');\r\n      } else {\r\n        toast.success('Google login successful!');\r\n        navigate('/dashboard'); // Redirect normal users to dashboard\r\n      }\r\n    } catch (err) {\r\n      toast.error('Google Sign-In failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\" style={{ maxWidth: '500px' }}>\r\n      <h2 className=\"mb-3\">Login</h2>\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        className=\"form-control mb-2\"\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        className=\"form-control mb-2\"\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button className=\"btn btn-primary w-100 mb-3\" onClick={handleLogin}>\r\n        Login\r\n      </button>\r\n      <hr />\r\n      <GoogleLogin\r\n        onSuccess={handleGoogleSuccess}\r\n        onError={() => toast.error('Google Login Failed')}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}