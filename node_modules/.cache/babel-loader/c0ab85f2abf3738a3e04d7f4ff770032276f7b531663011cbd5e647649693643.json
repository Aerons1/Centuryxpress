{"ast":null,"code":"// Save token in localStorage\nexport const saveToken=token=>localStorage.setItem('token',token);// Get user info from the token\nexport const getUserInfo=()=>{const token=localStorage.getItem('token');if(!token)return null;try{const decoded=JSON.parse(atob(token.split('.')[1]));return{name:decoded.name,isAdmin:decoded.isAdmin};// Extract name and isAdmin from payload\n}catch{return null;}};// Logout by removing the token from localStorage\nexport const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');};// Check if the user is an admin from the token payload\nexport const isAdmin=()=>{const token=localStorage.getItem('token');if(!token)return false;try{const payload=JSON.parse(atob(token.split('.')[1]));return payload.isAdmin===true;}catch{return false;}};// Check if the user is logged in by verifying the presence of the token\nexport const isLoggedIn=()=>{const token=localStorage.getItem('token');return token?true:false;// Check if there's a token stored\n};","map":{"version":3,"names":["saveToken","token","localStorage","setItem","getUserInfo","getItem","decoded","JSON","parse","atob","split","name","isAdmin","logout","removeItem","payload","isLoggedIn"],"sources":["C:/Users/PC/centuryexpress/client/src/auth.js"],"sourcesContent":["// Save token in localStorage\r\nexport const saveToken = (token) => localStorage.setItem('token', token);\r\n\r\n// Get user info from the token\r\nexport const getUserInfo = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return null;\r\n  try {\r\n    const decoded = JSON.parse(atob(token.split('.')[1]));\r\n    return { name: decoded.name, isAdmin: decoded.isAdmin }; // Extract name and isAdmin from payload\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Logout by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Check if the user is an admin from the token payload\r\nexport const isAdmin = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return false;\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    return payload.isAdmin === true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if the user is logged in by verifying the presence of the token\r\nexport const isLoggedIn = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? true : false;  // Check if there's a token stored\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,SAAS,CAAIC,KAAK,EAAKC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEF,KAAK,CAAC,CAExE;AACA,MAAO,MAAM,CAAAG,WAAW,CAAGA,CAAA,GAAM,CAC/B,KAAM,CAAAH,KAAK,CAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAI,CAACJ,KAAK,CAAE,MAAO,KAAI,CACvB,GAAI,CACF,KAAM,CAAAK,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrD,MAAO,CAAEC,IAAI,CAAEL,OAAO,CAACK,IAAI,CAAEC,OAAO,CAAEN,OAAO,CAACM,OAAQ,CAAC,CAAE;AAC3D,CAAE,KAAM,CACN,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CAC1BX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC,CAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAED;AACA,MAAO,MAAM,CAAAF,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAX,KAAK,CAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAI,CAACJ,KAAK,CAAE,MAAO,MAAK,CACxB,GAAI,CACF,KAAM,CAAAc,OAAO,CAAGR,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrD,MAAO,CAAAK,OAAO,CAACH,OAAO,GAAK,IAAI,CACjC,CAAE,KAAM,CACN,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,UAAU,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAf,KAAK,CAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,CAC3C,MAAO,CAAAJ,KAAK,CAAG,IAAI,CAAG,KAAK,CAAG;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}