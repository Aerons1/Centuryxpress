{"ast":null,"code":"// Save token in localStorage\nexport const saveToken = token => localStorage.setItem('token', token);\n\n// Get user info from the token\nexport const getUserInfo = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return null;\n  try {\n    const decoded = JSON.parse(atob(token.split('.')[1]));\n    return {\n      name: decoded.name,\n      isAdmin: decoded.isAdmin\n    }; // Extract name and isAdmin from payload\n  } catch {\n    return null;\n  }\n};\n\n// Logout by removing the token from localStorage\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n};\n\n// Check if the user is an admin from the token payload\nexport const isAdmin = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return false;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.isAdmin === true;\n  } catch {\n    return false;\n  }\n};\n\n// Check if the user is logged in by verifying the presence of the token\nexport const isLoggedIn = () => {\n  const token = localStorage.getItem('token');\n  return token ? true : false; // Check if there's a token stored\n};","map":{"version":3,"names":["saveToken","token","localStorage","setItem","getUserInfo","getItem","decoded","JSON","parse","atob","split","name","isAdmin","logout","removeItem","payload","isLoggedIn"],"sources":["C:/Users/PC/centuryexpress/client/src/auth.js"],"sourcesContent":["// Save token in localStorage\r\nexport const saveToken = (token) => localStorage.setItem('token', token);\r\n\r\n// Get user info from the token\r\nexport const getUserInfo = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return null;\r\n  try {\r\n    const decoded = JSON.parse(atob(token.split('.')[1]));\r\n    return { name: decoded.name, isAdmin: decoded.isAdmin }; // Extract name and isAdmin from payload\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Logout by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Check if the user is an admin from the token payload\r\nexport const isAdmin = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return false;\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    return payload.isAdmin === true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if the user is logged in by verifying the presence of the token\r\nexport const isLoggedIn = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? true : false;  // Check if there's a token stored\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAIC,KAAK,IAAKC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;AAExE;AACA,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACJ,KAAK,EAAE,OAAO,IAAI;EACvB,IAAI;IACF,MAAMK,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAO;MAAEC,IAAI,EAAEL,OAAO,CAACK,IAAI;MAAEC,OAAO,EAAEN,OAAO,CAACM;IAAQ,CAAC,CAAC,CAAC;EAC3D,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1BX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;EAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMF,OAAO,GAAGA,CAAA,KAAM;EAC3B,MAAMX,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACJ,KAAK,EAAE,OAAO,KAAK;EACxB,IAAI;IACF,MAAMc,OAAO,GAAGR,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAOK,OAAO,CAACH,OAAO,KAAK,IAAI;EACjC,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAGA,CAAA,KAAM;EAC9B,MAAMf,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOJ,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,CAAE;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}