{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import{GoogleLogin}from'@react-oauth/google';import{jwtDecode}from'jwt-decode';import{toast}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import API from'../api';import{saveToken}from'../auth';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Login(){const[email,setEmail]=useState('');const[password,setPassword]=useState('');const navigate=useNavigate();const handleLogin=async()=>{try{const{data}=await API.post('/auth/login',{email,password});saveToken(data.token);const decoded=jwtDecode(data.token);if(decoded.isAdmin){toast.success('Admin login successful!');navigate('/admin');}else{toast.success('Login successful!');navigate('/dashboard');// Redirect normal users to dashboard\n}}catch(err){var _err$response,_err$response$data;toast.error(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.msg)||'Invalid credentials');}};const handleGoogleSuccess=async credentialResponse=>{try{const{data}=await API.post('/auth/google',{token:credentialResponse.credential});saveToken(data.token);const decoded=jwtDecode(data.token);if(decoded.isAdmin){toast.success('Admin Google login successful!');navigate('/admin');}else{toast.success('Google login successful!');navigate('/dashboard');// Redirect normal users to dashboard\n}}catch(err){toast.error('Google Sign-In failed');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-5\",style:{maxWidth:'500px'},children:[/*#__PURE__*/_jsx(\"h2\",{className:\"mb-3\",children:\"Login\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"Email\",className:\"form-control mb-2\",onChange:e=>setEmail(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",className:\"form-control mb-2\",onChange:e=>setPassword(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary w-100 mb-3\",onClick:handleLogin,children:\"Login\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(GoogleLogin,{onSuccess:handleGoogleSuccess,onError:()=>toast.error('Google Login Failed')})]});}export default Login;","map":{"version":3,"names":["React","useState","useNavigate","GoogleLogin","jwtDecode","toast","API","saveToken","jsx","_jsx","jsxs","_jsxs","Login","email","setEmail","password","setPassword","navigate","handleLogin","data","post","token","decoded","isAdmin","success","err","_err$response","_err$response$data","error","response","msg","handleGoogleSuccess","credentialResponse","credential","className","style","maxWidth","children","type","placeholder","onChange","e","target","value","onClick","onSuccess","onError"],"sources":["C:/Users/PC/centuryexpress/client/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport API from '../api';\r\nimport { saveToken } from '../auth';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const { data } = await API.post('/auth/login', { email, password });\r\n      saveToken(data.token);\r\n\r\n      const decoded = jwtDecode(data.token);\r\n\r\n      if (decoded.isAdmin) {\r\n        toast.success('Admin login successful!');\r\n        navigate('/admin');\r\n      } else {\r\n        toast.success('Login successful!');\r\n        navigate('/dashboard'); // Redirect normal users to dashboard\r\n      }\r\n    } catch (err) {\r\n      toast.error(err.response?.data?.msg || 'Invalid credentials');\r\n    }\r\n  };\r\n\r\n  const handleGoogleSuccess = async (credentialResponse) => {\r\n    try {\r\n      const { data } = await API.post('/auth/google', {\r\n        token: credentialResponse.credential\r\n      });\r\n      saveToken(data.token);\r\n\r\n      const decoded = jwtDecode(data.token);\r\n\r\n      if (decoded.isAdmin) {\r\n        toast.success('Admin Google login successful!');\r\n        navigate('/admin');\r\n      } else {\r\n        toast.success('Google login successful!');\r\n        navigate('/dashboard'); // Redirect normal users to dashboard\r\n      }\r\n    } catch (err) {\r\n      toast.error('Google Sign-In failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\" style={{ maxWidth: '500px' }}>\r\n      <h2 className=\"mb-3\">Login</h2>\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        className=\"form-control mb-2\"\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        className=\"form-control mb-2\"\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button className=\"btn btn-primary w-100 mb-3\" onClick={handleLogin}>\r\n        Login\r\n      </button>\r\n      <hr />\r\n      <GoogleLogin\r\n        onSuccess={handleGoogleSuccess}\r\n        onError={() => toast.error('Google Login Failed')}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}